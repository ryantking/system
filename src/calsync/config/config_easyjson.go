// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package config

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig(in *jlexer.Lexer, out *Global) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accounts":
			if in.IsNull() {
				in.Skip()
				out.Accounts = nil
			} else {
				in.Delim('[')
				if out.Accounts == nil {
					if !in.IsDelim(']') {
						out.Accounts = make([]Account, 0, 1)
					} else {
						out.Accounts = []Account{}
					}
				} else {
					out.Accounts = (out.Accounts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Account
					(v1).UnmarshalEasyJSON(in)
					out.Accounts = append(out.Accounts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "calendarDir":
			out.CalendarDir = string(in.String())
		case "tokenDir":
			out.TokenDir = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig(out *jwriter.Writer, in Global) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accounts\":"
		out.RawString(prefix[1:])
		if in.Accounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Accounts {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"calendarDir\":"
		out.RawString(prefix)
		out.String(string(in.CalendarDir))
	}
	{
		const prefix string = ",\"tokenDir\":"
		out.RawString(prefix)
		out.String(string(in.TokenDir))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Global) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Global) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Global) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Global) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig(l, v)
}
func easyjson6615c02eDecodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig1(in *jlexer.Lexer, out *Calendar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig1(out *jwriter.Writer, in Calendar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Calendar) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Calendar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Calendar) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Calendar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig1(l, v)
}
func easyjson6615c02eDecodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig2(in *jlexer.Lexer, out *Account) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "calendars":
			if in.IsNull() {
				in.Skip()
				out.Calendars = nil
			} else {
				in.Delim('[')
				if out.Calendars == nil {
					if !in.IsDelim(']') {
						out.Calendars = make([]Calendar, 0, 2)
					} else {
						out.Calendars = []Calendar{}
					}
				} else {
					out.Calendars = (out.Calendars)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Calendar
					(v4).UnmarshalEasyJSON(in)
					out.Calendars = append(out.Calendars, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "credentials":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Credentials = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					(out.Credentials)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig2(out *jwriter.Writer, in Account) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"calendars\":"
		out.RawString(prefix)
		if in.Calendars == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Calendars {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"credentials\":"
		out.RawString(prefix)
		if in.Credentials == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Credentials {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if m, ok := v8Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v8Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v8Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Account) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Account) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Account) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Account) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComRyantkingWorkshopSrcProjectsCalsyncConfig2(l, v)
}
