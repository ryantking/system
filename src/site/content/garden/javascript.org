#+title: JavaScript
#+description: JavaScript is a language that  I would rather not write, but is unavoidable, especially now that its an instrumental part of Web3. The biggest challenge for me is that the ecosystem is so complex compared to Go. This makes bootstrapping new projects challenging since so it requires a bunch of tools and configuration.
#+slug: javascript
#+tags[]: public programming languages web
#+type: garden
#+lastmod: 2022-05-09 00:06:30.304428123 -0400 EDT
* Tools
These are the tools that I've found useful to use or remember when working with =Node.js= projects. The setup will only be for JavaScript, but all of them support[[/garden/typescript][ TypeScript]] or are not impacted by it.

** Package Managers
Package managers are way more visible in JavaScript than they are in the likes of Go so choosing the right one is critical. Basically every tool in the JavaScript ecosystem assumes that it is being ran local to the project, which means the package manager is basically the only thing that I install globally.

*** NPM
NPM is the default =Node.js= package manager. It is the most ubiquitous, but it is typically not the most loved tool in the ecosystem.

*** Yarn
Yarn is basically a drop-in replacement for NPM. It adds some more features and is more efficient under the hood and is what I understand to be the best option.

** ESLint
ESLint is the linter that basically every project uses these days. Naturally, it has a complex setup:

#+BEGIN_SRC shell
yarn add -D eslint eslint-config-airbnb@latest eslint@^7.32.0 || ^8.2.0

# When using react, there ase a bunch of plugins for it
yarn add -D eslint-plugin-react@^7.28.0 eslint-plugin-react-hooks@^4.4.0 eslint-plugin-import@^2.25.3 eslint-plugin-jsx-a11y@^6.5.1

# Create the config using yarn
yarn create @eslint/config
#+END_SRC

The resulting configuration will then look something like this (some fields will be missing with react):

#+BEGIN_SRC json
{
    "eslintConfig": {
        "env": {
            "browser": true,
            "es2021": true,
            "node": true,
            "mocha": true
        },
        "extends": [
            "plugin:react/recommended",
            "airbnb"
        ],
        "parser": "@typescript-eslint/parser",
        "parserOptions": {
            "ecmaFeatures": {
                "jsx": true
            },
            "ecmaVersion": "latest",
            "sourceType": "module"
        },
        "plugins": ["react"]
    }
}
#+END_SRC

** Prettier
Prettier is the standard formatter for basically every file format used in front end stacks. You should always install it with the ESLint plugin so the two can play nicely.

#+BEGIN_SRC shell
yarn add -D prettier eslint-config-prettier
#+END_SRC

Wire it up to =ESLint= to avoid any conflicts.

#+BEGIN_SRC shell
yarn add -D eslint-config-prettier
#+END_SRC

We also must add ~"prettier"~ to ~eslintConfig.extends~ in ~package.json~.

This is a good starter prettier configuration to add to ~package.json~:

#+BEGIN_SRC json
{
    "prettier": {
        "printWidth": 120,
        "semi": true,
        "singleQuote": true,
        "useTabs": false
    }
}
#+END_SRC

You also need to tell ESLint to let Prettier call the shots on formatting rules:

#+BEGIN_SRC json
{
    "eslintConfig": {
        "extends": ["prettier"]
    }
}
#+END_SRC

** Husky
Husky is a configuration layer for git hooks. I'm excited to play with this more since I've only ever manually added scripts to the ~.git/hooks~ folder, which aren't checked into source control so I bet the UX of writing them in JSON in the central configuration file will be a sizable improvement. For now install it with:

#+BEGIN_SRC shell
yarn add -D husky
#+END_SRC

** XO
A tool that I wanted to love, but unfortunately could not find a good way to integrate it with my setup. It provides a really nice wrapper around ESLint with a really solid style guide. It doesn't have any LSP functionality, which is a deal breaker. If it was actually a wrapper that added a nice UI, but used the ESLint config, it might be nice for hooks and CI, but it needs its own separate configuration. This would mean having two sources of truth for linter configuration, a non-starter for me.

You can still use the XO style guide with vanilla ESLint so it might be worth checking it out.

** Markdown
Even though Markdown is its own language, all the tooling I use is in the =Node.js= ecosystem. There are tools in things like Ruby, but I figure keep the amount of ecosystems I need to get familiar with as a small as possible.

*** Prettier
Prettier supports Markdown without any extra configuration, but I like to enable formatting line lengths:

#+BEGIN_SRC json
{
  "prettier": {
    "printWidth": 120,
    "proseWrap": "always"
  }
}
#+END_SRC

*** Markdownlint
You need to  install =markdownlint= with yarn:

#+BEGIN_SRC shell
yarn add -D markdownlint-cli
#+END_SRC

Now unfortunately it doesn't support configuration in ~package.json~ so it needs to be in its own file. These are some config values that I've found make the linting not that annoying. It doesn't integrate with prettier like ESLint, which sucks. Its separate config should be in ~.markdownlint.yaml~:

#+BEGIN_SRC yaml
---
default: true
# MD013/line-length - Line length
MD013:
  # Number of characters
  line_length: 120
  # Number of characters for headings
  heading_line_length: 120
  # Number of characters for code blocks
  code_block_line_length: 120
  # Include code blocks
  code_blocks: true
  # Include tables
  tables: true
  # Include headings
  headings: true
  # Include headings
  headers: true
  # Strict length checking
  strict: false
  # Stern length checking
  stern: false
MD025: false
#+END_SRC

*** Remark
Even though =markdownlint= is disappointing, its not really all that necessary since we live in the =LSP= era. The best one I've found is Remark, which has a bunch of plugins:

#+BEGIN_SRC shell
yarn add -D remark \
    remark-language-server \
    remark-preset-lint-consistent \
    remark-preset-lint-recommended \
    remark-frontmatter \
    remark-gfm
#+END_SRC

Then it has a config section in ~package.json~. I just like to use - for bullets and install the plugins:

#+BEGIN_SRC json
{
  "remarkConfig": {
    "settings": {
      "bullet": "-"
    },
    "plugins": [
      "remark-preset-lint-consistent",
      "remark-preset-lint-recommended",
      "remark-frontmatter",
      "remark-gfm"
    ]
  }
}
#+END_SRC


* Backlinks

- [[/garden/typescript][TypeScript]]


