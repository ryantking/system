# -*- mode: sh -*-
# shellcheck disable=SC2059,SC2155

# Orginal: https://github.com/sapegin/dotfiles/blob/dd063f9c30de7d2234e8accdb5272a5cc0a3388b/includes/bash_prompt.bash

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
WHITE=$(tput setaf 7)
NOCOLOR=$(tput sgr0)

local_username=ryan
prompt_symbol="$"
prompt_dirty_symbol="*"

case $(id -u) in
  0) user_color="$RED" ;;  # root
  *) user_color="$GREEN" ;;
esac

function prompt_command() {
  # Local or SSH session?
  local remote=
  [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] && remote=1

  local git_prompt=
  if [[ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]]; then
    local branch="$(git symbolic-ref HEAD 2>/dev/null)"
    branch="${branch##refs/heads/}"

    local dirty=
    git diff --no-ext-diff --quiet --exit-code --ignore-submodules 2>/dev/null || dirty=1
    [ -z "$dirty" ] && test -n "$(git status --porcelain)" && dirty=1

    if [ -n "$dirty" ]; then
      git_prompt=" $WHITE$branch$MAGENTA$prompt_dirty_symbol$NOCOLOR"
    else
      git_prompt=" $WHITE$branch$NOCOLOR"
    fi
  fi

  local venv_prompt=
  if [ -n "$VIRTUAL_ENV" ]; then
    venv_prompt="\[$WHITE\]$(basename "$VIRTUAL_ENV")\[$NOCOLOR\] "
  fi

  local user_prompt=
  [ "$USER" != "$local_username" ] && user_prompt="$user_color$USER$NOCOLOR"

  local host_prompt=
  [ -n "$remote" ] && host_prompt="@$YELLOW$HOSTNAME$NOCOLOR"

  local login_delimiter=
  [ -n "$user_prompt" ] || [ -n "$host_prompt" ] && login_delimiter=":"

  first_line="$user_prompt$host_prompt$login_delimiter$BLUE\w$NOCOLOR$git_prompt"
  # Text (commands) inside \[...\] does not impact line length calculation which fixes stange bug when looking through the history
  # $? is a status of last command, should be processed every time prompt prints
  second_line="$venv_prompt\`if [ \$? = 0 ]; then echo \[\$GREEN\]; else echo \[\$RED\]; fi\`\$prompt_symbol\[\$NOCOLOR\] "
  PS1="\n$first_line\n$second_line"

  PS2="\[$GREEN\]$prompt_symbol\[$NOCOLOR\] "

  local title="$(basename "$PWD")"
  [ -n "$remote" ] && title="$title \xE2\x80\x94 $HOSTNAME"
  echo -ne "\033]0;$title"; echo -ne "\007"
}

command -v git >/dev/null 2>&1 && PROMPT_COMMAND=prompt_command
